// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  role              UserRole
  avatarUrl         String?
  isVerified        Boolean   @default(false)
  verificationToken String?
  store             Store?    @relation(fields: [storeId], references: [id])
  storeId           Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  address           Address[]
  orders            Order[]
  cart              Cart?
}

model Store {
  id           Int           @id @default(autoincrement())
  name         String
  location     String
  latitude     Int
  longitude    Int
  products     Product[]
  discounts    Discount[]
  salesReports SalesReport[]
  stockReports StockReport[]
  User         User[]
  Stock        Stock[]
}

model Product {
  id          Int               @id @default(autoincrement())
  slug        String
  name        String
  description String
  price       Int
  imageUrl    String?
  categories  ProductCategory[]
  stores      Store[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  stock       Stock[]
  orderItems  OrderItem[]
  StockReport StockReport[]
  Discount    Discount[]
  CartItem    CartItem[]
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Discount {
  id           Int          @id @default(autoincrement())
  discountType DiscountType
  value        Int
  minPurchase  Int?
  products     Product?     @relation(fields: [productId], references: [id])
  productId    Int?
  stores       Store        @relation(fields: [storeId], references: [id])
  storeId      Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Address {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  addressLine String
  city        String
  state       String
  postalCode  String
  latitude    Int?
  longitude   Int?
  isPrimary   Boolean @default(false)
  Order       Order[]
}

model ShippingOption {
  id             Int     @id @default(autoincrement())
  name           String
  baseCost       Int
  additionalCost Int
  maxDistance    Int
  Order          Order[]
}

model Stock {
  id           Int            @id @default(autoincrement())
  quantity     Int
  store        Store          @relation(fields: [storeId], references: [id])
  storeId      Int
  product      Product        @relation(fields: [productId], references: [id])
  productId    Int
  StockHistory StockHistory[]
}

model StockHistory {
  id         Int        @id @default(autoincrement())
  changeType ChangeType
  quantity   Int
  createdAt  DateTime   @default(now())
  stock      Stock      @relation(fields: [stockId], references: [id])
  stockId    Int
}

model SalesReport {
  id         Int   @id @default(autoincrement())
  store      Store @relation(fields: [storeId], references: [id])
  storeId    Int
  totalSales Int
  month      Int
  year       Int
}

model StockReport {
  id           Int     @id @default(autoincrement())
  store        Store   @relation(fields: [storeId], references: [id])
  storeId      Int
  product      Product @relation(fields: [productId], references: [id])
  productId    Int
  totalAdded   Int
  totalRemoved Int
  finalStock   Int
  month        Int
  year         Int
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cart       Cart     @relation(fields: [cartId], references: [id])
  cartId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  totalPrice Int
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [userId], references: [id])
  userId           Int
  address          Address        @relation(fields: [addressId], references: [id])
  addressId        Int
  shippingOption   ShippingOption @relation(fields: [shippingOptionId], references: [id])
  shippingOptionId Int
  status           OrderStatus
  totalAmount      Int
  paymentProofUrl  String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  orderItems       OrderItem[]
  Payment          Payment[]
}

model OrderItem {
  id            Int     @id @default(autoincrement())
  order         Order   @relation(fields: [orderId], references: [id])
  orderId       Int
  product       Product @relation(fields: [productId], references: [id])
  productId     Int
  quantity      Int
  price         Int
  discountValue Int
}

model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int
  amountPaid    Int
  paymentMethod PaymentMethod
  isConfirmed   Boolean       @default(false)
  confirmedAt   DateTime?
}

enum UserRole {
  SUPER_ADMIN
  STORE_ADMIN
  USER
}

enum DiscountType {
  FLAT
  PERCENTAGE
  BUY_ONE_GET_ONE
}

enum ChangeType {
  INCREASE
  DECREASE
}

enum OrderStatus {
  PendingPayment
  Confirmed
  Shipped
  Completed
  Cancelled
}

enum PaymentMethod {
  Transfer
  CreditCard
  Gateway
}
